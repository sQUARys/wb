package main

import (
	"fmt"
	"sort"
	"strings"
)

/*
=== –ü–æ–∏—Å–∫ –∞–Ω–∞–≥—Ä–∞–º–º –ø–æ —Å–ª–æ–≤–∞—Ä—é ===

–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –º–Ω–æ–∂–µ—Å—Ç–≤ –∞–Ω–∞–≥—Ä–∞–º–º –ø–æ —Å–ª–æ–≤–∞—Ä—é.
–ù–∞–ø—Ä–∏–º–µ—Ä:
'–ø—è—Ç–∞–∫', '–ø—è—Ç–∫–∞' –∏ '—Ç—è–ø–∫–∞' - –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –æ–¥–Ω–æ–º—É –º–Ω–æ–∂–µ—Å—Ç–≤—É,
'–ª–∏—Å—Ç–æ–∫', '—Å–ª–∏—Ç–æ–∫' –∏ '—Å—Ç–æ–ª–∏–∫' - –¥—Ä—É–≥–æ–º—É.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏: —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Å—Å–∏–≤ - –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ - —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ utf8.
–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞–ø—É –º–Ω–æ–∂–µ—Å—Ç–≤ –∞–Ω–∞–≥—Ä–∞–º–º.
–ö–ª—é—á - –ø–µ—Ä–≤–æ–µ –≤—Å—Ç—Ä–µ—Ç–∏–≤—à–µ–µ—Å—è –≤ —Å–ª–æ–≤–∞—Ä–µ —Å–ª–æ–≤–æ –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
–ó–Ω–∞—á–µ–Ω–∏–µ - —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Å—Å–∏–≤, –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ, —Å–ª–æ–≤–æ –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞. –ú–∞—Å—Å–∏–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é.
–ú–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏–∑ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
–í—Å–µ —Å–ª–æ–≤–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É.
–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.

–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ go vet –∏ golint.
*/

type DefMap struct { // —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ö—Ä–∞–Ω—è—â–∞—è –≤ —Å–µ–±–µ –º–∞–ø—É –∏ –º—å—é—Ç–µ–∫—Å –¥–ª—è –µ–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
	m map[string][]string
}

func New() *DefMap { // —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã DefMap —Å –ø—É—Å—Ç–æ–π –º–∞–ø–æ–π
	return &DefMap{
		m: make(map[string][]string),
	}
}

var mapa *DefMap

func isAnagramm(key string, str string) bool {
	isAnWord := false

	keyWords := strings.Split(key, "")
	strWords := strings.Split(str, "")

	sort.Slice(keyWords, func(i, j int) bool {
		return keyWords[i] < keyWords[j]
	})

	sort.Slice(strWords, func(i, j int) bool {
		return strWords[i] < strWords[j]
	})

	sortedKeyWords := strings.Join(keyWords, "")
	sortedStrWords := strings.Join(strWords, "")

	if sortedKeyWords == sortedStrWords {
		isAnWord = true
	}

	return isAnWord
}

func isFirstMeet(word string) bool {
	isFirst := true

	for key, _ := range mapa.m {
		if isAnagramm(key, word) {
			isFirst = false
		}
	}
	return isFirst
}

func findSingleArr() {
	for key, val := range mapa.m {
		if len(val) == 1 {
			delete(mapa.m, key)
		}
	}
}

func uploadMap(arr *[]string) map[string][]string {
	currentArr := *arr

	mapa.m[currentArr[0]] = append(mapa.m[currentArr[0]], currentArr[0])

	isUnique := true

	for i := range currentArr {
		for key, _ := range mapa.m {
			isUnique = true
			if isAnagramm(key, currentArr[i]) {
				for j := range mapa.m[key] {
					if mapa.m[key][j] == currentArr[i] {
						isUnique = false
						break
					}
				}
				if isUnique {
					mapa.m[key] = append(mapa.m[key], currentArr[i])
					break
				}
			} else {
				if isFirstMeet(currentArr[i]) {
					mapa.m[currentArr[i]] = append(mapa.m[currentArr[i]], currentArr[i])
				}
			}
		}
	}

	findSingleArr()
	return mapa.m
}

func main() {
	in := []string{"–ø—è—Ç–∞–∫", "–∞–∫—Ç—è–ø", "—Ç—è–ø–∫–∞", "—Ç—è–ø–∫–∞", "–∞–∫—Ç—è–ø", "–ª–∏—Å—Ç–æ–∫", "—Å–ª–∏—Ç–æ–∫", "—Å—Ç–æ–ª–∏–∫", "üòÄüòÉ", "üòÉüòÄ", "hi", "ih", "h", "fgsdfgsd"}

	mapa = New()
	fmt.Println(uploadMap(&in))
}
